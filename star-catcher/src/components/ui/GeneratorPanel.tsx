'use client';

import React, {useState, useCallback, useEffect, useRef, useMemo} from 'react';
import { FontPairing, ColorPalette } from '@/lib/schemas';
import { memorySystem } from '@/lib/memory';
import TypographyPreview from './TypographyPreview';
import LikeBar from './LikeBar';
import { Unlock, Lock } from 'lucide-react';
import { useSession } from 'next-auth/react';

type Category = 'serif' | 'sans-serif' | 'handwriting' | 'display';

interface GeneratorPanelProps {
    className?: string;
}

export default function GeneratorPanel({
                                           className = '',
                                       }: GeneratorPanelProps) {
    const [currentFont, setCurrentFont] = useState<FontPairing | null>(null);
    const [currentPalette, setCurrentPalette] = useState<ColorPalette | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const ALL_CATEGORIES: Category[] = ['serif', 'sans-serif', 'handwriting', 'display'];

    // --- Locks ---
    const [lockPrimaryFont, setLockPrimaryFont] = useState(false);
    const [lockSecondaryFont, setLockSecondaryFont] = useState(false);
    const [lockPrimaryColor, setLockPrimaryColor] = useState(false);
    const [lockSecondaryColor, setLockSecondaryColor] = useState(false);
    const [lockAccentColor, setLockAccentColor] = useState(false);

    const [primaryCategories, setPrimaryCategories] = useState<Category[]>(['serif', 'sans-serif']);
    const [secondaryCategories, setSecondaryCategories] = useState<Category[]>(['serif', 'sans-serif']);

    const toggleIn = (arr: Category[], v: Category) =>
        arr.includes(v) ? arr.filter(x => x !== v) : [...arr, v];

    const { data: session } = useSession();
    const hasAutoGenerated = useRef(false);

    // --- Generator function ---
    const generateDesign = useCallback(async (type: 'fonts' | 'colors', options: any = {}) => {
        setError(null);
        try {
            const memories = memorySystem.getLikedItems();
            const response = await fetch('/api/design', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    type: type === 'fonts' ? 'font' : 'color',
                    options,
                    memories,
                }),
            });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const result = await response.json();
            return result.data;
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An error occurred');
            console.error('Generation error:', err);
            return null;
        }
    }, []);

    const buildFontOptions = useCallback(() => ({
        primaryCategories,
        secondaryCategories,
        ...(currentFont && (lockPrimaryFont || lockSecondaryFont)
            ? {
                locked: {
                    ...(lockPrimaryFont
                        ? { primaryName: currentFont.primary.name, primaryWeight: currentFont.primary.weight }
                        : {}),
                    ...(lockSecondaryFont
                        ? { secondaryName: currentFont.secondary.name, secondaryWeight: currentFont.secondary.weight }
                        : {}),
                },
            }
            : {}),
    }), [currentFont, primaryCategories, secondaryCategories, lockPrimaryFont, lockSecondaryFont]);

    const generateBoth = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        try {
            // Fonts
            const fontOptions = buildFontOptions();
            const newFont = await generateDesign('fonts', fontOptions);
            if (newFont) {
                setCurrentFont(prev => ({
                    primary:   lockPrimaryFont   ? prev?.primary   : newFont.primary,
                    secondary: lockSecondaryFont ? prev?.secondary : newFont.secondary,
                } as FontPairing));
            }

            // Colors
            const newPalette = await generateDesign('colors', {});
            if (newPalette) {
                setCurrentPalette(prev => ({
                    primary:   lockPrimaryColor   ? prev?.primary   : newPalette.primary,
                    secondary: lockSecondaryColor ? prev?.secondary : newPalette.secondary,
                    accent:    lockAccentColor    ? prev?.accent    : newPalette.accent,
                } as ColorPalette));
            }
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An error occurred');
        } finally {
            setIsLoading(false);
        }
    }, [
        generateDesign,
        buildFontOptions,
        lockPrimaryFont,
        lockSecondaryFont,
        lockPrimaryColor,
        lockSecondaryColor,
        lockAccentColor,
    ]);

    // --- Spacebar generation ---
    useEffect(() => {
        const handler = (e: KeyboardEvent) => {
            const t = e.target as HTMLElement | null;
            const tag = t?.tagName;
            const isTyping = t?.isContentEditable || tag === 'INPUT' || tag === 'TEXTAREA' || tag === 'SELECT';
            if (isTyping) return;
            if (e.code === 'Space') {
                e.preventDefault();
                if (!isLoading) generateBoth();
            }
        };
        window.addEventListener('keydown', handler);
        return () => window.removeEventListener('keydown', handler);
    }, [isLoading, generateBoth]);

    // --- Auto-generate on first render ---
    useEffect(() => {
        if (hasAutoGenerated.current) return;
        hasAutoGenerated.current = true;
        if (!currentFont || !currentPalette) generateBoth();
    }, [generateBoth, currentFont, currentPalette]);

    // --- Handle Likes (saves both, if present) ---
    const handleLike = useCallback(async () => {
        const userEmail = session?.user?.email;
        if (!userEmail) return console.error('No logged-in user email found');

        if (currentFont) {
            const fontMemory = memorySystem.createMemoryFromData('font', currentFont);
            const fontFeedback = memorySystem.createFeedbackFromMemory(fontMemory, 'like');
            memorySystem.saveMemory(fontMemory);
            memorySystem.saveFeedback(fontFeedback);

            try {
                const res = await fetch('/api/save/fonts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ ...currentFont, email: userEmail }),
                });
                const result = await res.json();
                if (!res.ok) throw new Error(result.error || 'Failed to save font');
            } catch (err) {
                console.error('Font save error:', err);
            }
        }

        if (currentPalette) {
            const colorData = {
                email: userEmail,
                case_id: Date.now().toString(),
                color: currentPalette.primary.value,
                color2: currentPalette.secondary.value,
                accent: currentPalette.accent.value,
            };
            const colorMemory = memorySystem.createMemoryFromData('color', colorData);
            const colorFeedback = memorySystem.createFeedbackFromMemory(colorMemory, 'like');
            memorySystem.saveMemory(colorMemory);
            memorySystem.saveFeedback(colorFeedback);

            try {
                const res = await fetch('/api/save/colors', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(colorData),
                });
                const result = await res.json();
                if (!res.ok) throw new Error(result.error || 'Failed to save color');
            } catch (err) {
                console.error('Color save error:', err);
            }
        }
    }, [currentFont, currentPalette, session]);


    const colors = useMemo(() => {
        return {
            primary:   currentPalette?.primary?.value  ?? '#111111',
            secondary: currentPalette?.secondary?.value ?? '#374151',
            accent:    currentPalette?.accent?.value    ?? '#2563eb',
        };
    }, [currentPalette]);

    // --- Render ---
    const renderContent = () => (
        <div className="space-y-6">
            <h4 className="font-outfit text-left text-sm md:text-base font-medium text-ink/80">
                Press spacebar to generate themes!
            </h4>

            <div className="grid grid-cols-3 gap-3">
                {([
                    { key: 'primary' as const,   label: 'Primary',   val: colors.primary,   locked: lockPrimaryColor,   toggle: () => setLockPrimaryColor(v => !v) },
                    { key: 'secondary' as const, label: 'Secondary', val: colors.secondary, locked: lockSecondaryColor, toggle: () => setLockSecondaryColor(v => !v) },
                    { key: 'accent' as const,    label: 'Accent',    val: colors.accent,    locked: lockAccentColor,    toggle: () => setLockAccentColor(v => !v) },
                ]).map(({ key, label, val, locked, toggle }) => (
                    <div key={key} className="bg-white rounded-md border border-gray-200 overflow-hidden font-ui text-ink">
                        <div style={{ background: val, height: 48 }} />
                        <div className="p-2 text-sm flex items-center justify-between">
                            <div className="flex items-center gap-2">
                                <span className="font-medium">{label}</span>
                                <button
                                    type="button"
                                    aria-pressed={locked}
                                    onClick={toggle}
                                    className="inline-flex items-center gap-2 px-3 py-1.5 text-sm text-ink"
                                    title={locked ? 'Unlock' : 'Lock'}
                                >
                                    {locked ? <Lock className="h-3.5 w-3.5" /> : <Unlock className="h-3.5 w-3.5" />}
                                </button>
                            </div>
                            <code className="text-gray-600">{val}</code>
                        </div>
                    </div>
                ))}
            </div>

            <TypographyPreview fontPairing={currentFont} palette={currentPalette} />

            {/* Controls card */}
            <div className="rounded-2xl border border-bg bg-nav-surface p-6 shadow-sm">
                <div className="grid grid-cols-1 gap-8 md:grid-cols-2">
                    {/* Primary */}
                    <div>
                        <div className="mb-3 flex items-center gap-1">
              <span className="font-outfit text-sm font-medium leading-none text-ink/90">
                Primary Font
              </span>
                            <button
                                type="button"
                                onClick={() => setLockPrimaryFont(v => !v)}
                                aria-pressed={lockPrimaryFont}
                                className="inline-flex items-center gap-2 px-3 py-1.5 text-sm text-ink"
                            >
                                {lockPrimaryFont ? <Lock className="h-4 w-4" /> : <Unlock className="h-4 w-4" />}
                            </button>
                        </div>

                        <div className="flex flex-wrap gap-3">
                            {ALL_CATEGORIES.map(cat => (
                                <label
                                    key={`prim-${cat}`}
                                    className="inline-flex items-center gap-2 rounded-full bg-page/60 px-3 py-1.5 font-outfit text-sm capitalize text-ink/80 border border-bg"
                                >
                                    <input
                                        type="checkbox"
                                        className="h-4 w-4 rounded-sm checkbox-ink focus:ring-2 focus:ring-[color:var(--ink)]/30"
                                        checked={primaryCategories.includes(cat)}
                                        onChange={() => setPrimaryCategories(c => toggleIn(c, cat))}
                                        disabled={lockPrimaryFont}
                                    />
                                    <span>{cat.replace('-', ' ')}</span>
                                </label>
                            ))}
                        </div>
                    </div>

                    {/* Secondary */}
                    <div>
                        <div className="mb-3 flex items-center gap-1">
              <span className="font-outfit text-sm font-medium leading-none text-ink/90">
                Secondary Font
              </span>
                            <button
                                type="button"
                                onClick={() => setLockSecondaryFont(v => !v)}
                                aria-pressed={lockSecondaryFont}
                                className="inline-flex items-center gap-2 px-3 py-1.5 text-sm text-ink"
                            >
                                {lockSecondaryFont ? <Lock className="h-4 w-4" /> : <Unlock className="h-4 w-4" />}
                            </button>
                        </div>

                        <div className="flex flex-wrap gap-3">
                            {ALL_CATEGORIES.map(cat => (
                                <label
                                    key={`sec-${cat}`}
                                    className="inline-flex items-center gap-2 rounded-full bg-page/60 px-3 py-1.5 font-outfit text-sm capitalize text-ink/80 border border-bg"
                                >
                                    <input
                                        type="checkbox"
                                        className="h-4 w-4 rounded-sm checkbox-ink focus:ring-2 focus:ring-[color:var(--ink)]/30"
                                        checked={secondaryCategories.includes(cat)}
                                        onChange={() => setSecondaryCategories(c => toggleIn(c, cat))}
                                        disabled={lockSecondaryFont}
                                    />
                                    <span>{cat.replace('-', ' ')}</span>
                                </label>
                            ))}
                        </div>
                    </div>
                </div>


            </div>

            {(currentFont || currentPalette) && <LikeBar onLike={handleLike} />}
        </div>
    );

    return (
        <div className={`bg-light rounded-lg shadow-lg ${className}`}>
            <div className="p-6">
                {error && (
                    <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-md">
                        <p className="text-red-600 text-sm">{error}</p>
                    </div>
                )}
                {renderContent()}
            </div>
        </div>
    );
}
