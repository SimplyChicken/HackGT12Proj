'use client';

import React, { useState, useCallback, useEffect, useRef } from 'react';
import { FontPairing, ColorPalette, Component, MemoryItem } from '@/lib/schemas';
import { memorySystem } from '@/lib/memory';
import TypographyPreview from './TypographyPreview';
import LikeBar from './LikeBar';
import { Palette, Type, Component as ComponentIcon, Unlock, Lock, UserPlus} from 'lucide-react';
import { useSession } from 'next-auth/react';
import Link from 'next/link';

type TabType = 'fonts' | 'colors' | 'components';
type Category = 'serif' | 'sans-serif' | 'handwriting' | 'display';

interface GeneratorPanelProps {
  className?: string;
  memories?: MemoryItem[];
  setMemories?: (memories: MemoryItem[]) => void;
  isMemoriesOpen?: boolean;
  setIsMemoriesOpen?: (open: boolean) => void;
}

export default function GeneratorPanel({ 
  className = '',
  memories = [],
  setMemories,
  isMemoriesOpen = false,
  setIsMemoriesOpen
}: GeneratorPanelProps) {
  const { data: session } = useSession();
  const [activeTab, setActiveTab] = useState<TabType>('fonts');
  const [currentFont, setCurrentFont] = useState<FontPairing | null>(null);
  const [currentPalette, setCurrentPalette] = useState<ColorPalette | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const ALL_CATEGORIES: Category[] = ['serif','sans-serif','handwriting','display'];

  // --- Locks ---
  const [lockPrimaryFont, setLockPrimaryFont] = useState(false);
  const [lockSecondaryFont, setLockSecondaryFont] = useState(false);
  const [lockPrimaryColor, setLockPrimaryColor] = useState(false);
  const [lockSecondaryColor, setLockSecondaryColor] = useState(false);
  const [lockAccentColor, setLockAccentColor] = useState(false);

  const [primaryCategories, setPrimaryCategories] = useState<Category[]>(['serif','sans-serif']);
  const [secondaryCategories, setSecondaryCategories] = useState<Category[]>(['serif','sans-serif']);

  const toggleIn = (arr: Category[], v: Category) =>
    arr.includes(v) ? arr.filter(x => x !== v) : [...arr, v];

  const hasAutoGenerated = useRef(false);

  // --- Generator function ---
  const generateDesign = useCallback(async (type: TabType, options: any = {}) => {
    setError(null);
    try {
      const memories = memorySystem.getLikedItems();
      console.log(`Generating ${type} with options:`, options);
      
      const response = await fetch('/api/design', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ type: type === 'fonts' ? 'font' : type === 'colors' ? 'color' : 'component', options, memories }),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`HTTP error! status: ${response.status}, body:`, errorText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      console.log(`Generated ${type}:`, result);
      
      if (!result.data) {
        throw new Error(`No data returned for ${type}`);
      }
      
      return result.data;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      console.error(`Generation error for ${type}:`, err);
      setError(errorMessage);
      return null;
    }
  }, []);

  const buildFontOptions = useCallback(() => ({
    primaryCategories,
    secondaryCategories,
    ...(currentFont && (lockPrimaryFont || lockSecondaryFont)
      ? {
          locked: {
            ...(lockPrimaryFont ? { primaryName: currentFont.primary.name, primaryWeight: currentFont.primary.weight } : {}),
            ...(lockSecondaryFont ? { secondaryName: currentFont.secondary.name, secondaryWeight: currentFont.secondary.weight } : {}),
          }
        }
      : {}),
  }), [currentFont, primaryCategories, secondaryCategories, lockPrimaryFont, lockSecondaryFont]);

  const generateBoth = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      // Fonts
      const fontOptions = buildFontOptions();
      const newFont = await generateDesign('fonts', fontOptions);
      if (newFont) {
        setCurrentFont(prev => ({
          primary:   lockPrimaryFont   ? prev?.primary   : newFont.primary,
          secondary: lockSecondaryFont ? prev?.secondary : newFont.secondary,
        }));
      }

      // Colors
      const newPalette = await generateDesign('colors', {});
      if (newPalette) {
        console.log('Setting new palette:', newPalette);
        setCurrentPalette(prev => ({
          primary:   lockPrimaryColor   ? prev?.primary   : newPalette.primary,
          secondary: lockSecondaryColor ? prev?.secondary : newPalette.secondary,
          accent:    lockAccentColor    ? prev?.accent    : newPalette.accent,
        }));
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      console.error('Generate both error:', err);
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, [generateDesign, buildFontOptions, lockPrimaryFont, lockSecondaryFont, lockPrimaryColor, lockSecondaryColor, lockAccentColor]);

  // --- Spacebar generation ---
  useEffect(() => {
    const handler = (e: KeyboardEvent) => {
      const t = e.target as HTMLElement | null;
      const tag = t?.tagName;
      const isTyping = t?.isContentEditable || tag === 'INPUT' || tag === 'TEXTAREA' || tag === 'SELECT';
      if (isTyping) return;
      if (e.code === 'Space') {
        e.preventDefault();
        if (!isLoading) generateBoth();
      }
    };
    window.addEventListener('keydown', handler);
    return () => window.removeEventListener('keydown', handler);
  }, [isLoading, generateBoth]);

  // --- Auto-generate on first render ---
  useEffect(() => {
    if (hasAutoGenerated.current) return;
    hasAutoGenerated.current = true;
    if (!currentFont || !currentPalette) generateBoth();
  }, [generateBoth, currentFont, currentPalette]);

  // --- Handle Likes ---
  const handleLike = useCallback(async () => {
    const userEmail = session?.user?.email;
    if (!userEmail) {
      console.error("No logged-in user email found");
      return;
    }

    console.log('Handling like for user:', userEmail);
    console.log('Current font:', currentFont);
    console.log('Current palette:', currentPalette);

    // Save font
    if (currentFont) {
      const fontMemory = memorySystem.createMemoryFromData('font', currentFont);
      const fontFeedback = memorySystem.createFeedbackFromMemory(fontMemory, 'like');
      memorySystem.saveMemory(fontMemory);
      memorySystem.saveFeedback(fontFeedback);
      
      try {
        const fontData = { ...currentFont, email: userEmail };
        console.log('Saving font data:', fontData);
        
        const res = await fetch('/api/save/fonts', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(fontData),
        });
        
        const result = await res.json();
        console.log('Font save response:', result);
        
        if (!res.ok) {
          throw new Error((result as any).error || 'Failed to save font');
        }
        console.log('Font saved successfully:', result);
      } catch (err) {
        console.error('Font save error:', err);
      }
    }

    // Save colors
    if (currentPalette) {
      // Validate color structure
      if (!currentPalette.primary?.value || !currentPalette.secondary?.value || !currentPalette.accent?.value) {
        console.error('Invalid color palette structure:', currentPalette);
        return;
      }

      const colorData = {
        email: userEmail,
        case_id: Date.now().toString(),
        primary: currentPalette.primary.value,
        secondary: currentPalette.secondary.value,
        accent: currentPalette.accent.value,
      };
      
      console.log('Saving color data:', colorData);
      
      const colorMemory = memorySystem.createMemoryFromData('color', colorData);
      const colorFeedback = memorySystem.createFeedbackFromMemory(colorMemory, 'like');
      memorySystem.saveMemory(colorMemory);
      memorySystem.saveFeedback(colorFeedback);
      
      try {
        const res = await fetch('/api/save/colors', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(colorData),
        });
        
        const result = await res.json();
        console.log('Color save response:', result);
        
        if (!res.ok) {
          throw new Error((result as any).error || 'Failed to save color');
        }
        console.log('Color saved successfully:', result);
      } catch (err) {
        console.error('Color save error:', err);
      }
    }

    // Save combo (both font and color together)
    if (currentFont && currentPalette) {
      try {
        // Create the color pair object in the format expected by the combo API
        const colorPair = {
          case_id: Date.now().toString(),
          primary: {
            name: "Primary",
            value: currentPalette.primary.value,
            contrast: currentPalette.primary.contrast || '#000000'
          },
          secondary: {
            name: "Secondary", 
            value: currentPalette.secondary.value,
            contrast: currentPalette.secondary.contrast || '#000000'
          },
          accent: {
            name: "Accent",
            value: currentPalette.accent.value,
            contrast: currentPalette.accent.contrast || '#000000'
          }
        };

        // Create the font pair object in the format expected by the combo API
        const fontPair = {
          case_id: (Date.now() + 1).toString(), // Different case_id to avoid conflicts
          primary: currentFont.primary,
          secondary: currentFont.secondary
        };

        const comboData = {
          colorPair,
          fontPair
        };

        console.log('Saving combo data:', comboData);
        
        const res = await fetch('/api/save/combos', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(comboData),
        });
        
        const result = await res.json();
        console.log('Combo save response:', result);
        
        if (!res.ok) {
          throw new Error((result as any).error || 'Failed to save combo');
        }
        console.log('Combo saved successfully:', result);
      } catch (err) {
        console.error('Combo save error:', err);
      }
    }
  }, [currentFont, currentPalette, session]);

  // --- Render ---
  const renderContent = () => (
    <div className="space-y-6">
      {/* Track Preferences Banner for Unauthenticated Users */}
      {!session && (
        <div className="mb-6 rounded-lg border border-blue-200 bg-blue-50 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <UserPlus className="w-5 h-5 text-blue-600" />
              <div>
                <h4 className="text-sm font-semibold text-blue-800">
                  Track Your Design Preferences
                </h4>
                <p className="text-xs text-blue-600">
                  Sign up to have the AI learn your style preferences and create personalized designs
                </p>
              </div>
            </div>
            <Link href="/accounts">
              <button className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 transition-colors">
                Track Preferences
              </button>
            </Link>
          </div>
        </div>
      )}

      <div className="mb-6 rounded-lg border border-gray-200 bg-white p-6">
        <h4 className="mb-3 text-base font-semibold text-gray-800 text-left">
          Press the spacebar to generate themes!
        </h4>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Font One */}
          <div>
            <div className="flex items-center gap-2 mb-2">
              <span className="text-sm font-medium text-gray-700">Font One</span>
              <button type="button" onClick={() => setLockPrimaryFont(v => !v)} className="inline-flex items-center gap-2 px-3 py-1.5 text-sm text-gray-700">
                {lockPrimaryFont ? <Lock className="h-4 w-4" /> : <Unlock className="h-4 w-4" />}
              </button>
            </div>
            <div className="flex gap-4 flex-wrap">
              {ALL_CATEGORIES.map(cat => (
                <label key={`prim-${cat}`} className="inline-flex items-center gap-2 text-sm text-gray-700">
                  <input
                    type="checkbox"
                    className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-2 focus:ring-blue-500 focus:ring-offset-0"
                    checked={primaryCategories.includes(cat)}
                    onChange={() => setPrimaryCategories(c => toggleIn(c, cat))}
                    disabled={lockPrimaryFont}
                  />
                  <span className="capitalize">{cat}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Font Two */}
          <div>
            <div className="flex items-center gap-2 mb-2 justify-end">
              <span className="text-sm font-medium text-gray-700">Font Two</span>
              <button type="button" onClick={() => setLockSecondaryFont(v => !v)} className="inline-flex items-center gap-2 px-3 py-1.5 text-sm text-gray-700">
                {lockSecondaryFont ? <Lock className="h-4 w-4" /> : <Unlock className="h-4 w-4" />}
              </button>
            </div>
            <div className="flex gap-4 flex-wrap justify-end">
              {ALL_CATEGORIES.map(cat => (
                <label key={`sec-${cat}`} className="inline-flex items-center gap-2 text-sm text-gray-700">
                  <input
                    type="checkbox"
                    className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-2 focus:ring-blue-500 focus:ring-offset-0"
                    checked={secondaryCategories.includes(cat)}
                    onChange={() => setSecondaryCategories(c => toggleIn(c, cat))}
                    disabled={lockSecondaryFont}
                  />
                  <span className="capitalize">{cat}</span>
                </label>
              ))}
            </div>
          </div>
        </div>

        {/* Color Locks */}
        <div className="flex gap-6 mt-6">
          {['Primary', 'Secondary', 'Accent'].map((label, idx) => {
            const lockState = idx === 0 ? lockPrimaryColor : idx === 1 ? lockSecondaryColor : lockAccentColor;
            const toggle = idx === 0 ? setLockPrimaryColor : idx === 1 ? setLockSecondaryColor : setLockAccentColor;
            return (
              <div key={label} className="flex items-center gap-2">
                <span className="text-sm font-medium text-gray-700">{label}</span>
                <button type="button" onClick={() => toggle(v => !v)} className="inline-flex items-center gap-2 px-3 py-1.5 text-sm text-gray-700">
                  {lockState ? <Lock className="h-4 w-4" /> : <Unlock className="h-4 w-4" />}
                </button>
              </div>
            );
          })}
        </div>
      </div>


      <TypographyPreview fontPairing={currentFont} palette={currentPalette} />
      {(currentFont || currentPalette) && <LikeBar onLike={handleLike} />}
    </div>
  );

  return (
    <div className={`bg-light rounded-lg shadow-lg ${className}`}>
      <div className="p-6">
        {error && (
          <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-md">
            <p className="text-red-600 text-sm">{error}</p>
          </div>
        )}
        {renderContent()}
      </div>
    </div>
  );
}